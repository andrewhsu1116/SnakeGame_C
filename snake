#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include <pthread.h>

#include <time.h>

#define KEYUP 'w'
#define KEYDOWN 's'
#define KEYLEFT 'a'
#define KEYRIGHT 'd'

void sleep(double s) {
    time_t cur_time = time(NULL);
    while ((difftime(time(NULL), cur_time)) < s);
}

char* makeSnake();
void updateSnakeLocation(char** graph,int* snakeX,int* snakeY,int snakeLen,int offsetX,int offsetY,int score);
void updateSnakeGraphLocation(char** graph,char* snake,int* snakeX,int* snakeY,int snakeLen);
void SnakeEat(char** graph,char** snake,int** snakeX,int** snakeY,int* score,int* snakeLen);
void makeFood(char** graph,int graphSize,int graphColSize);
void freeSnake(char* snake);


void displayGraph(char** graph,int graphSize,int score);
char** makeGraph(int graphSize,int graphColSize);
void updateGraph(char** graph,int x,int y,char val);
void clear(char** graph,int graphSize,int graphColSize);
void freeGraph(char** graph,int graphSize);

void* getKey(void* none);

int main(){
  int score=0;

  int graphSize=20;
  int graphColSize=100;
  char** graph=makeGraph(graphSize,graphColSize);

  int snakeLen=1;
  int* snakeX=malloc(sizeof(int));
  int* snakeY=malloc(sizeof(int));
  char* snake=makeSnake(snakeX,snakeY,graphColSize/2,graphSize/2);

  char key=0;
  srand(time(NULL));

  pthread_t thread;
  pthread_create(&thread,NULL,getKey,&key);

  while(1){
    clear(graph,graphSize,graphColSize);
    updateSnakeGraphLocation(graph,snake,snakeX,snakeY,snakeLen);
    makeFood(graph,graphSize,graphColSize);
    displayGraph(graph,graphSize,score);
    int offsetX=0;
    int offsetY=0;
    switch(key){
      case KEYUP:
        offsetY=-1;
        break;
      case KEYDOWN:
        offsetY=1;
        break;
      case KEYLEFT:
        offsetX=-1;
        break;
      case KEYRIGHT:
        offsetX=1;
        break;
    }
    if(graph[snakeY[0]+offsetY][snakeX[0]+offsetX]=='*') SnakeEat(graph,&snake,&snakeX,&snakeY,&score,&snakeLen);
    updateSnakeLocation(graph,snakeX,snakeY,snakeLen,offsetX,offsetY,score);
    sleep(100);
  }

  pthread_cancel(thread);
  freeSnake(snake);
  freeGraph(graph,graphSize);
  return 0;
}

char* makeSnake(int* snakeX,int* snakeY,int x,int y){
  char* snake=malloc(sizeof(char));
  snake[0]='@';
  snakeX[0]=x;
  snakeY[0]=y;
  return snake;
}


void updateSnakeLocation(char** graph,int* snakeX,int* snakeY,int snakeLen,int offsetX,int offsetY,int score){
  int i=0;
  int lastX[snakeLen];
  int lastY[snakeLen];
  memcpy(lastX,snakeX,snakeLen*sizeof(int));
  memcpy(lastY,snakeY,snakeLen*sizeof(int));
  for(i=1;i<snakeLen;i++){
    snakeX[i]=lastX[i-1];
    snakeY[i]=lastY[i-1];
  }
  snakeX[0]+=offsetX;
  snakeY[0]+=offsetY;

  if(graph[snakeY[0]][snakeX[0]]=='='||graph[snakeY[0]][snakeX[0]]=='#'){
    system("cls");
    printf("GameOver , Score = %d",score);
    exit(0);
  }
}

void updateSnakeGraphLocation(char** graph,char* snake,int* snakeX,int* snakeY,int snakeLen){
  int i=0;
  for(i=0;i<snakeLen;i++){
    graph[snakeY[i]][snakeX[i]]=snake[i];
  }
}

void SnakeEat(char** graph,char** snake,int** snakeX,int** snakeY,int* score,int* snakeLen){
  *snake=realloc(*snake,sizeof(char)*((*snakeLen)+1));
  *snakeX=realloc(*snakeX,sizeof(int)*((*snakeLen)+1));
  *snakeY=realloc(*snakeY,sizeof(int)*((*snakeLen)+1));
  (*snake)[*snakeLen]='=';
  (*snakeX)[*snakeLen]=(*snakeX)[*snakeLen-1]; 
  (*snakeY)[*snakeLen]=(*snakeY)[*snakeLen-1];
  (*score)+=1;
  (*snakeLen)+=1;
  graph[(*snakeY)[0]][(*snakeX)[0]]=' ';
}

void makeFood(char** graph,int graphSize,int graphColSize){
  if(rand()%10!=1) return;
  int randX=0;
  int randY=0;
  while(1){
    randY=rand()%graphSize;
    randX=rand()%graphColSize;
    if(graph[randY][randX]==' '){
      graph[randY][randX]='*';
      return;
    }
  }
}

void freeSnake(char* snake){
  free(snake);
}













void displayGraph(char** graph,int graphSize,int score){
  printf("Score : %d\n",score);
  int i=0;
  for(i=0;i<graphSize;i++){
    printf("%s\n",graph[i]);
  }
}

char** makeGraph(int graphSize,int graphColSize){
  int i=0,x=0;
  char** graph = malloc(sizeof(char*)*graphSize);
  for(i=0;i<graphSize;i++){
    graph[i]=malloc(sizeof(char)*(graphColSize+1));
    for(x=0;x<graphColSize;x++){
      if(i==0||i==(graphSize-1)||x==0||x==(graphColSize-1)){
        graph[i][x]='#';
      }else{
        graph[i][x]=' ';
      } 
    }
    graph[i][graphColSize]='\0';
  }
  return graph;
}

void updateGraph(char** graph,int x,int y,char val){
  graph[y][x]=val;
}

void clear(char** graph,int graphSize,int graphColSize){
  int i=0,x=0;
  for(i=0;i<graphSize;i++){
    for(x=0;x<graphColSize;x++){
      if(graph[i][x]=='*') continue;
      if(i==0||i==(graphSize-1)||x==0||x==(graphColSize-1)){
        graph[i][x]='#';
      }else{
        graph[i][x]=' ';
      } 
    }
  }
  system("cls");
}

void freeGraph(char** graph,int graphSize){
  int i=0;
  for(i=0;i<graphSize;i++){
    free(graph[i]);
  }
  free(graph);
}

void* getKey(void* key){
  while(1){
    *(char*)key=getchar();
  }
}



